services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: last_call
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote.rmi.port=9101
    volumes:
      - kafka_data:/tmp/kraft-combined-logs
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      PORT: 8081
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: last_call_user_db
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DDL_AUTO: update
      JWT_SECRET: oA7iXP6Uz5uWF06YDExnoIyekDGnBqCK
    restart: unless-stopped

  item-service:
    build:
      context: ./item-service
      dockerfile: Dockerfile
    container_name: item-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      PORT: 8082
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: last_call_item_db
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DDL_AUTO: update
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    restart: unless-stopped

  room-service:
    build:
      context: ./room-service
      dockerfile: Dockerfile
    container_name: room-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      PORT: 8083
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: last_call_room_db
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DDL_AUTO: update
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    restart: unless-stopped

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service
    depends_on:
      user-service:
        condition: service_started
      item-service:
        condition: service_started
      room-service:
        condition: service_started
    ports:
      - "8080:8080"
    environment:
      PORT: 8080
      USER_SERVICE_URL: http://user-service:8081
      ITEM_SERVICE_URL: http://item-service:8082
      ROOM_SERVICE_URL: http://room-service:8083
      JWT_SECRET: oA7iXP6Uz5uWF06YDExnoIyekDGnBqCK
    restart: unless-stopped

volumes:
  postgres_data:
  kafka_data: